@using Smartstore.Utilities

@* TODO: (core) Refactor for new link provider system (widgets etc.) *@
@* TODO: (mh) (core) Restructure CSS (or script) in a way that the last visible button always is rounded right. *@

@functions
{
    private string Value => ViewData.Model != null ? Convert.ToString(ViewData.Model) : null;
}

@{
    Assets.AppendScriptFiles("~/js/smartstore.linkbuilder.js");

    var rtl = WorkContext.WorkingLanguage.Rtl;
    var rnd = CommonHelper.GenerateRandomInteger();
    var id = Html.IdForModel();
    var metadata = LinkResolver.GetBuilderMetadata().ToDictionary(x => x.Schema);
    var link = await LinkResolver.ResolveAsync(Value);
    var expression = link.Expression;
    var hideQueryString = GetMetadata<bool>("hideQueryString");
    var arr = GetMetadata<string>("allowedTypes").SplitSafe(',');
    var allowedTypes = arr.Any() ? arr : metadata.Keys;
}

<div id="link-builder-@rnd" class="link-builder edit-control"
     data-field-id="@id"
     data-editor="link"
     data-current-type="@(Value != null ? expression.Schema : string.Empty)"
     attr-data-product-picker-callback='(allowedTypes.Contains(DefaultLinkProvider.SchemaProduct), "lbPickerSelectionCompleted" + rnd.ToString())'>

    @* Template control that receives the link expression. *@
    <input asp-for="@Model" type="hidden" value="@Value" />

    <div class="d-flex flex-nowrap input-group">

        @* 1. prepend type selector. *@
        <div class="input-group-prepend link-type-container">
            <button type="button" class="btn btn-light btn-linktype btn-icon dropdown-toggle" data-toggle="dropdown" title="">
                <i class="fa fa-link"></i>
            </button>
            <div class="dropdown-menu dropdown-menu-@(rtl ? "right" : "left")">
                @foreach (var type in allowedTypes)
                {
                    var info = metadata[type];
                    <a class="dropdown-item link-type" href="#" data-type="@type">
                        <i class="fa-fw @info.Icon"></i>
                        <span>@T(info.ResKey)</span>
                    </a>
                }
            </div>
        </div>

        @* 2. main control. *@
        @foreach (var type in allowedTypes)
        {
            var label = expression.Schema == type ? link.Label : string.Empty;
            var value = expression.Schema == expression.Target;

            <div class="flex-grow-1 link-control" attr-class='(expression.Schema != type, "hide")' data-type="@type.ToString().ToLower()">
                @if (type == DefaultLinkProvider.SchemaProduct)
                {
                    <input type="text" class="form-control resettable product-picker-input" value="@label" readonly />
                }
                else if (type == DefaultLinkProvider.SchemaCategory)
                {
                    <select class="form-control transferable resettable"
                            data-select-url="@Url.Action("AllCategories", "Category", new { area = "Admin" })"
                            data-select-selected-id="@value"
                            data-select-init-text="@label"></select>
                }
                else if (type == DefaultLinkProvider.SchemaManufacturer)
                {
                    <select class="form-control transferable resettable"
                            data-select-url="@Url.Action("AllManufacturers", "Manufacturer", new { area = "Admin" })"
                            data-select-selected-id="@value"
                            data-select-init-text="@label"></select>
                }
                else if (type == DefaultLinkProvider.SchemaTopic)
                {
                    <select class="form-control transferable resettable"
                            data-select-url="@Url.Action("AllTopics", "Topic", new { area = "Admin" })"
                            data-select-selected-id="@value"
                            data-select-init-text="@label"></select>
                }
                @*TODO: (mh) (core) Must be provided & injected by forum and news modules*@
                @*else if (type == LinkType.BlogPost)
                    {
                        <select class="form-control transferable resettable"
                                data-select-url="@Url.Action("AllBlogPosts", "Blog", new { area = "admin" })"
                                data-select-selected-id="@value"
                                data-select-init-text="@label"></select>
                    }
                    else if (type == LinkType.NewsItem)
                    {
                        <select class="form-control transferable resettable"
                                data-select-url="@Url.Action("AllNews", "News", new { area = "admin" })"
                                data-select-selected-id="@value"
                                data-select-init-text="@label"></select>
                    }*@
                else if (type == DefaultLinkProvider.SchemaUrl)
                {
                    <input type="text" class="form-control transferable resettable" value="@value" />
                }
                else if (type == DefaultLinkProvider.SchemaFile)
                {
                    <input id="lb-file-url-@rnd" type="text" class="form-control transferable resettable" value="@label" readonly />
                }
            </div>
        }

        @* 3. append additional controls. *@
        @if (allowedTypes.Contains(DefaultLinkProvider.SchemaProduct))
        {
            <div class="input-group-append link-control" attr-class='(expression.Schema != DefaultLinkProvider.SchemaProduct, "hide")' data-type="product">
                <entity-picker max-items="1"
                               append-mode="false"
                               dialog-title=@T("Common.Entity.SelectProduct").JsValue
                               caption=@T("Common.Search").JsValue />
            </div>
        }

        @if (allowedTypes.Contains(DefaultLinkProvider.SchemaFile))
        {
            <div class="input-group-append link-control" attr-class='(expression.Schema != DefaultLinkProvider.SchemaFile, "hide")' data-type="file">
                @*TODO: (mh) (core) Implement RoxyFileManager when available*@
                <a href="javascript:;" class="btn btn-light browse-files" data-url="@Url.Content("~/Admin/RoxyFileManager/")" data-field-id="lb-file-url-@rnd">
                    <i class="fa fa-upload"></i>
                    <span>@(T("Common.BrowseFiles"))&hellip;</span>
                </a>
            </div>
        }

        @* 4. append additional buttons. *@
        <div class="input-group-append">
            <button type="button" class="btn btn-light btn-icon btn-to-danger btn-reset" title="@T("Common.Remove")">
                @*<i class="fa fa-unlink"></i>*@
                <span class="fs-h5" style="line-height: 1">&times;</span>
            </button>
            @if (!hideQueryString)
            {
                <button type="button" class="btn btn-light btn-icon btn-query-string" attr-class='(expression.Schema == DefaultLinkProvider.SchemaUrl, "hide")'
                        title="@T("Common.QueryString")" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-hashtag @(expression.Query.HasValue() ? "text-success" : "text-muted")"></i>
                </button>
                <div class="dropdown-menu dropdown-menu-right">
                    <div class="px-2">
                        <input type="text" class="form-control transferable resettable query-string" value="@expression.Query.TrimStart('?')" placeholder="@T("Common.QueryString")" style="width: 350px;" />
                    </div>
                </div>
            }
        </div>
    </div>
</div>