@using Smartstore.Web.Models.Catalog
@using Microsoft.AspNetCore.Routing
@using Smartstore.Utilities

@model IQuantityInput

@{
    var large = ViewData["large"].Convert<bool>();
    //var itemId = ViewData["itemId"].Convert<string>();
    // TODO: (mc) > (mh) finalize dropdown later in v3.1+
    var inputStyle = "spinner";
    //var inputStyle = Model.QuantiyControlType;

    // TODO: (mh) (core) No need to fix this anymore?
    var attributes = new AttributeDictionary().Merge(CommonHelper.ObjectToDictionary(ViewData["htmlAttributes"] ?? new object()));
    var fixedAttributes = new AttributeDictionary();

    foreach (var attr in attributes)
    {
        fixedAttributes.Merge(attr.Key.StartsWith("data_") ? attr.Key.Replace("_", "-") : attr.Key, attr.Value.ToString(), true);
    }

    fixedAttributes.Merge("class", "form-control" + (large ? " form-control-lg" : ""));
    fixedAttributes.Merge("data-min", Model.MinOrderAmount.ToString(), true);
    fixedAttributes.Merge("data-max", Model.MaxOrderAmount.ToString(), true);
    fixedAttributes.Merge("data-postfix", Model.QuantityUnitName, true);
    fixedAttributes.Merge("data-step", Model.QuantityStep.ToString(), true);
}

<div class="qty-input" attr-class='(Model.QuantityUnitName != null && Model.QuantityUnitName.Value.HasValue(), "has-postfix")'>
    @if (inputStyle == "spinner")
    {
        <input asp-for="@Model" attrs="@fixedAttributes" />
    }
    else
    {
        <div sm-if="Model.AllowedQuantities != null && Model.AllowedQuantities.Count > 0" class="mf-dropdown" style="display: block">
            <button class="btn btn-warning btn-labeled icon-right btn-block" attr-class='(large, "btn-lg")'>
                <span data-bind="value">@Model.EnteredQuantity</span>
                <b><i class="fas fa-caret-down"></i></b>
            </button>
            @*TODO: (mh) (core)*@
            @Html.DropDownListFor(model => Model.EnteredQuantity, Model.AllowedQuantities, new { @class = "form-control qty-dropdown noskin" })
        </div>
    }
</div>