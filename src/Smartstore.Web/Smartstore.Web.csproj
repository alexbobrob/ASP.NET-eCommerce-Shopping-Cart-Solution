<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
    <CopyRefAssembliesToPublishDirectory>false</CopyRefAssembliesToPublishDirectory>
    <UserSecretsId>b35c0f56-dfa8-4120-b29b-a677578afcd1</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Autofac.Extensions.DependencyInjection" Version="7.0.1" />
    <PackageReference Include="Z.EntityFramework.Plus.EFCore" Version="5.0.0-preview.8.20407.4-02" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Smartstore.Core\Smartstore.Core.csproj" />
    <ProjectReference Include="..\Smartstore.Web.Common\Smartstore.Web.Common.csproj" />
    <ProjectReference Include="..\Smartstore\Smartstore.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="App_Data\" />
    <Folder Include="Modules\" />
  </ItemGroup>
  
  <PropertyGroup>
  	<!--Set this parameter to true to get the dlls copied from the NuGet cache to the output of your project-->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>
    <RazorCompileOnPublish>false</RazorCompileOnPublish>
    
    <!--The common language runtime (CLR) supports two types of garbage collection:
      workstation garbage collection, which is available on all systems, and server garbage collection,
      which is available on multiprocessor systems.
      
      For single-processor computers, the default workstation garbage collection should be the fastest option.
      Either workstation or server can be used for two-processor computers.
      Server garbage collection should be the fastest option for more than two processors.
      
      More details about GC you can see here: https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals-->
      
    <ServerGarbageCollection>false</ServerGarbageCollection>
    <!--In workstation or server garbage collection, you can enable concurrent garbage collection,
      which enables threads to run concurrently with a dedicated thread that performs the garbage
      collection for most of the duration of the collection.
      
      Concurrent garbage collection enables interactive applications to be more responsive by
      minimizing pauses for a collection. Managed threads can continue to run most of the time while
      the concurrent garbage collection thread is running. This results in shorter pauses while
      a garbage collection is occurring.
      
      To improve performance when several processes are running, disable concurrent garbage collection.
      
      More details here: https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#concurrent-garbage-collection-->
    <ConcurrentGarbageCollection>false</ConcurrentGarbageCollection>
  </PropertyGroup>

</Project>
