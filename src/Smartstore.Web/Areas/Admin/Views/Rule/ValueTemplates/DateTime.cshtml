@model IRuleExpression

@{
    var id = "rule-value-" + Model.Id;
    var format = (Model.Descriptor.Metadata.Get("DateTimeFormat") as string).NullEmpty() ?? "L LT";
    var pickTime = format == "L LT";
    var timeOnly = format == "LT";
    var iconClass = timeOnly ? "fa-clock" : "fa-calendar-alt";

    DateTime? value = null;
    if (Model.Value != null)
    {
        value = Convert.ToDateTime(Model.Value, System.Globalization.CultureInfo.CurrentCulture);
        // INFO: value handling is incompatible here with DateTime editor template (see also issue #256).
        // Rule values are explicitly converted to UTC when saved. This is important for accurate results of rule database queries.
        value = value.ToLocalTime();
    }

    var strValue = string.Empty;
    if (value.HasValue && value.Value > DateTime.MinValue)
    {
        strValue = timeOnly
            ? value.Value.ToShortTimeString()
            : (pickTime ? value.Value.ToString() : value.Value.ToShortDateString());
    }
}

<div class="date datetimepicker-group d-flex flex-grow-1" id="@id-parent" data-date="@strValue" data-target-input="nearest">
    <input id="@id" name="@id" 
        type="text"
        value="@strValue" 
        class="form-control datetimepicker-input edit-control" 
        data-editor="date-time"
        data-target="#@(id)-parent" 
        data-format="@format" />
	<div class="input-group-append input-group-addon" data-target="#@(id)-parent" data-toggle="datetimepicker">
		<span class="input-group-text"><i class="far @iconClass"></i></span>
	</div>
</div>
<script sm-target-zone="scripts" data-origin="rule-values">
    $(function () {
        $('#@(id)-parent').on('change.datetimepicker', Smartstore.Admin.Rules.onRuleValueChanged);
	});
</script>