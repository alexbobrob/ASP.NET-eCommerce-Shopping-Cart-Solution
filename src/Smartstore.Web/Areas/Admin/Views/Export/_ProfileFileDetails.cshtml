@using Smartstore.Admin.Models.Export

@model ExportFileDetailsModel

@{
	var downloadString = T("Common.Download").Value;
	var allStoresString = T("Admin.Common.StoresAll").Value;
	var hasExportFiles = Model.ExportFiles.Any();
	var hasPublicFiles = Model.PublicFiles.Any();
}

<div sm-if="!hasExportFiles && !hasPublicFiles" class="alert alert-info">
    @T("Common.NoFilesAvailable")
</div>
@if(hasExportFiles)
{
	<div class="mb-5">
		@foreach (var grp in Model.ExportFiles.OrderBy(x => x.DisplayOrder).GroupBy(x => x.DisplayOrder))
		{
			foreach (var file in grp)
			{
				<div class="py-1">
					<span class="badge @(file.RelatedType.HasValue ? "badge-secondary" : "badge-info")">
						@*<fileicon file-extension="@file.File.Extension" />*@
						@(file.Label.HasValue() ? file.Label : file.File.Extension.EmptyNull().ToLower().TrimStart('.'))
					</span>
					<a href="@Url.Action("DownloadExportFile", new { id = Model.Id, name = file.File.Name, isDeployment = Model.IsForDeployment })" title="@ViewBag.DownloadString" download>
						@file.FileRootPath
					</a>
				</div>
			}
		}
	</div>
}


<script>
    $(function() {
		// Button to copy URL to clipboard.

	});
</script>