@model PublicForumTopicPageModel

@{
    Assets.AppendTitleParts(Model.Subject);
    Assets.AppendMetaDescriptionParts(Model.Subject);
}

<div class="page forum-topic">
    <div class="mt-2 mb-4 w-75">
        @await Component.InvokeAsync("ForumSearchBox")
    </div>
    <div class="title">
        <h1 class="fs-h2">@Model.Subject</h1>
    </div>
    <div sm-if="Model.CanEditTopic || Model.CanDeleteTopic || Model.CanMoveTopic" class="manage btn-group my-3">
        @if (Model.CanEditTopic)
        {
            <a asp-action="TopicEdit" asp-controller="Boards" asp-route-id="@Model.Id" class="btn btn-secondary" rel="nofollow">
                <i class="far fa-edit"></i>
                <span>@T("Forum.EditTopic")</span>            
            </a>
        }
        @if (Model.CanDeleteTopic)
		{
            <form method="post" asp-action="TopicDelete" asp-controller="Boards">
                <input type="hidden" asp-for="Id" />
                <button type="submit" class="btn btn-secondary confirm">
				    <i class="far fa-trash-alt"></i>
				    <span>@T("Forum.DeleteTopic")</span>
                </button>
            </form>
		}
        @if (Model.CanMoveTopic)
		{
            <form method="post" asp-action="TopicMove" asp-controller="Boards">
                <input type="hidden" asp-for="Id" />
                <button type="submit" class="btn btn-secondary confirm">
				    <i class="fa fa-arrows-alt"></i>
				    <span>@T("Forum.MoveTopic")</span>
                </button>
            </form>
		}
    </div>

    <partial name="_PostListToolbar" />

    <div class="posts">
        @foreach (var post in Model.ForumPosts)
        {
            <partial name="_ForumPost" model="post" />
        }
    </div>

    <partial name="_PostListToolbar" />
</div>

<script sm-target-zone="scripts" data-origin="forum-topic">
    $(function () {
		// Post voting.
		$('.post-vote-button').on('click', function () {
            var self = $(this);
            var post = self.closest('.forum-post');

            $.ajax({
                type: 'POST',
                url: '@Url.Action("PostVote", "Boards")',
                data: { "id": post.data('id'), "vote": self.attr('value') },
                cache: false,
                success: function (resp) {
                    if (resp.success) {
                        self.closest('div').find(self.hasClass('post-vote-up') ? '.post-vote-down' : '.post-vote-up').show();
                        self.hide();

                        // Update counter.
                        if (resp.voteCount > 0) {
                            post.find('.votes').show().find('.vote-count').text(resp.voteCountString);
                        }
                        else {
                            post.find('.votes').text(resp.voteCountString).hide();
                        }
                    }

                    displayNotification(resp.message, resp.success ? 'success' : 'error');
                }
            });
        });

        // Delete post.
        $('.delete-post-link-button').on('click', function (e) {
            e.preventDefault();
            var self = $(this);

            confirm2({
                message: @(T("Admin.Common.AskToProceed").JsValue),
                icon: { type: 'question' },
                callback: accepted => {
                    if (accepted) {
                        self.closest('form').submit();
                    }
                }
            });

            return false;
        });
    });

    function onWatchTopicCompleted(data) {
        var response = data.responseJSON;
        var btn = $('#watch-topic');
        btn.toggleClass('btn-outline-warning', !response.Subscribed);
        btn.find('.watch-topic-text').html(response.Text);
    }
</script>
