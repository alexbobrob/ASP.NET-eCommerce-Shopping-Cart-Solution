@model AmazonPayButtonModel

<div attr-class='(!Model.SignIn, "my-2 ml-3")'>
    <div id="amazonpay-button"></div>
</div>

<script data-origin="amazonpay-button">
    loadAmazonPayScript(function () {
        var amazonPayButton = amazon.Pay.renderButton('#amazonpay-button', {
            merchantId: '@Html.Raw(Model.SellerId)',
            publicKeyId: '@Html.Raw(Model.PublicKeyId)',
            ledgerCurrency: '@Model.CurrencyCode',
            checkoutLanguage: '@Model.CheckoutLanguage',
            productType: '@Model.ButtonType',
            placement: '@Model.ButtonPlacement',
            buttonColor: '@Model.ButtonColor',
            sandbox: @(Model.UseSandbox.ToString().ToLower())
        });

        amazonPayButton.onClick(function () {
            var signIn = @(Model.SignIn.ToString().ToLower());
            var data = !signIn ? $('#startcheckout').closest('form').serialize() : null;

            $.ajax({
                type: 'POST',
                url: '@Url.Action("CreateCheckoutSession", "AmazonPay", new { area = string.Empty, buttonType = Model.ButtonType })',
                data: data,
			    success: function (response) {
                    if (response.success) {
                        var config = {
                            payloadJSON: response.payload,
                            signature: response.signature,
                            publicKeyId: '@Html.Raw(Model.PublicKeyId)'
                        };

                        // INFO: this forces us to redirect to AmazonPay in the same browser window.
                        if (signIn) {
                            amazonPayButton.initCheckout({
                                signInConfig: config
                            });
                        }
                        else {
                            amazonPayButton.initCheckout({
                                createCheckoutSessionConfig: config
                            });
                        }
				    }
				    else {
					    displayNotification(response.message, response.messageType);
				    }
			    }
		    });
        });
    });

    function loadAmazonPayScript(callback) {
        if (window.amazon && window.amazon.Pay) {
            callback();
            return;
        }

        var elem = document.createElement('script');
        elem.type = 'text/javascript';
        elem.async = true;
        elem.src = '@Html.Raw(Model.CheckoutScriptUrl)';

        elem.addEventListener('load', callback, false);

        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(elem, s);
    }
</script>