// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Smartstore.Data.SqlServer;

namespace Smartstore.Data.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerSmartDbContext))]
    partial class SqlServerSmartDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CustomerAddresses", b =>
                {
                    b.Property<int>("Customer_Id")
                        .HasColumnType("int");

                    b.Property<int>("Address_Id")
                        .HasColumnType("int");

                    b.HasKey("Customer_Id", "Address_Id");

                    b.HasIndex("Address_Id");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Discount_AppliedToCategories", b =>
                {
                    b.Property<int>("Discount_Id")
                        .HasColumnType("int");

                    b.Property<int>("Category_Id")
                        .HasColumnType("int");

                    b.HasKey("Discount_Id", "Category_Id");

                    b.HasIndex("Category_Id");

                    b.ToTable("Discount_AppliedToCategories");
                });

            modelBuilder.Entity("Discount_AppliedToManufacturers", b =>
                {
                    b.Property<int>("Discount_Id")
                        .HasColumnType("int");

                    b.Property<int>("Manufacturer_Id")
                        .HasColumnType("int");

                    b.HasKey("Discount_Id", "Manufacturer_Id");

                    b.HasIndex("Manufacturer_Id");

                    b.ToTable("Discount_AppliedToManufacturers");
                });

            modelBuilder.Entity("Discount_AppliedToProducts", b =>
                {
                    b.Property<int>("Discount_Id")
                        .HasColumnType("int");

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.HasKey("Discount_Id", "Product_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("Discount_AppliedToProducts");
                });

            modelBuilder.Entity("MediaFile_Tag_Mapping", b =>
                {
                    b.Property<int>("MediaFile_Id")
                        .HasColumnType("int");

                    b.Property<int>("MediaTag_Id")
                        .HasColumnType("int");

                    b.HasKey("MediaFile_Id", "MediaTag_Id");

                    b.HasIndex("MediaTag_Id");

                    b.ToTable("MediaFile_Tag_Mapping");
                });

            modelBuilder.Entity("Product_ProductTag_Mapping", b =>
                {
                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProductTag_Id")
                        .HasColumnType("int");

                    b.HasKey("Product_Id", "ProductTag_Id");

                    b.HasIndex("ProductTag_Id");

                    b.ToTable("Product_ProductTag_Mapping");
                });

            modelBuilder.Entity("RuleSet_Category_Mapping", b =>
                {
                    b.Property<int>("Category_Id")
                        .HasColumnType("int");

                    b.Property<int>("RuleSetEntity_Id")
                        .HasColumnType("int");

                    b.HasKey("Category_Id", "RuleSetEntity_Id");

                    b.HasIndex("RuleSetEntity_Id");

                    b.ToTable("RuleSet_Category_Mapping");
                });

            modelBuilder.Entity("RuleSet_CustomerRole_Mapping", b =>
                {
                    b.Property<int>("CustomerRole_Id")
                        .HasColumnType("int");

                    b.Property<int>("RuleSetEntity_Id")
                        .HasColumnType("int");

                    b.HasKey("CustomerRole_Id", "RuleSetEntity_Id");

                    b.HasIndex("RuleSetEntity_Id");

                    b.ToTable("RuleSet_CustomerRole_Mapping");
                });

            modelBuilder.Entity("RuleSet_Discount_Mapping", b =>
                {
                    b.Property<int>("Discount_Id")
                        .HasColumnType("int");

                    b.Property<int>("RuleSetEntity_Id")
                        .HasColumnType("int");

                    b.HasKey("Discount_Id", "RuleSetEntity_Id");

                    b.HasIndex("RuleSetEntity_Id");

                    b.ToTable("RuleSet_Discount_Mapping");
                });

            modelBuilder.Entity("RuleSet_PaymentMethod_Mapping", b =>
                {
                    b.Property<int>("PaymentMethod_Id")
                        .HasColumnType("int");

                    b.Property<int>("RuleSetEntity_Id")
                        .HasColumnType("int");

                    b.HasKey("PaymentMethod_Id", "RuleSetEntity_Id");

                    b.HasIndex("RuleSetEntity_Id");

                    b.ToTable("RuleSet_PaymentMethod_Mapping");
                });

            modelBuilder.Entity("RuleSet_ShippingMethod_Mapping", b =>
                {
                    b.Property<int>("ShippingMethod_Id")
                        .HasColumnType("int");

                    b.Property<int>("RuleSetEntity_Id")
                        .HasColumnType("int");

                    b.HasKey("ShippingMethod_Id", "RuleSetEntity_Id");

                    b.HasIndex("RuleSetEntity_Id");

                    b.ToTable("RuleSet_ShippingMethod_Mapping");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("AllowFiltering")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ExportMappings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacetTemplateHint")
                        .HasColumnType("int");

                    b.Property<bool>("IndexOptionNames")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AllowFiltering" }, "IX_AllowFiltering");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_DisplayOrder");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductAttributeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("bit");

                    b.Property<int>("LinkedProductId")
                        .HasColumnType("int");

                    b.Property<int>("MediaFileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("PriceAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductAttributeOptionsSetId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ValueTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("WeightAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeOptionsSetId");

                    b.ToTable("ProductAttributeOption");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductAttributeOptionsSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductAttributeOptionsSet");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowFiltering")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowOnProductPage")
                        .HasColumnType("bit");

                    b.Property<int>("SpecificationAttributeOptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "AllowFiltering" }, "IX_PSAM_AllowFiltering")
                        .HasAnnotation("SqlServer:Include", new[] { "ProductId", "SpecificationAttributeOptionId" });

                    b.HasIndex(new[] { "SpecificationAttributeOptionId", "AllowFiltering" }, "IX_PSAM_SpecificationAttributeOptionId_AllowFiltering")
                        .HasAnnotation("SqlServer:Include", new[] { "ProductId" });

                    b.ToTable("Product_SpecificationAttribute_Mapping");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductVariantAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CustomData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("TextPrompt")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex(new[] { "AttributeControlTypeId" }, "IX_AttributeControlTypeId");

                    b.HasIndex(new[] { "ProductId", "DisplayOrder" }, "IX_Product_ProductAttribute_Mapping_ProductId_DisplayOrder");

                    b.ToTable("Product_ProductAttribute_Mapping");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowOutOfStockOrders")
                        .HasColumnType("bit");

                    b.Property<string>("AssignedMediaFileIds")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("BasePriceAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("BasePriceBaseAmount")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryTimeId")
                        .HasColumnType("int");

                    b.Property<string>("Gtin")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<decimal?>("Height")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Length")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityUnitId")
                        .HasColumnType("int");

                    b.Property<string>("RawAttributes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AttributesXml");

                    b.Property<string>("Sku")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Width")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryTimeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuantityUnitId");

                    b.HasIndex(new[] { "Gtin" }, "IX_Gtin");

                    b.HasIndex(new[] { "IsActive" }, "IX_IsActive");

                    b.HasIndex(new[] { "ManufacturerPartNumber" }, "IX_ManufacturerPartNumber");

                    b.HasIndex(new[] { "Sku" }, "IX_ProductVariantAttributeCombination_SKU");

                    b.HasIndex(new[] { "StockQuantity", "AllowOutOfStockOrders" }, "IX_StockQuantity_AllowOutOfStockOrders");

                    b.ToTable("ProductVariantAttributeCombination");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("bit");

                    b.Property<int>("LinkedProductId")
                        .HasColumnType("int");

                    b.Property<int>("MediaFileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("PriceAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductVariantAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ValueTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("WeightAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Name");

                    b.HasIndex(new[] { "ProductVariantAttributeId", "DisplayOrder" }, "IX_ProductVariantAttributeValue_ProductVariantAttributeId_DisplayOrder");

                    b.HasIndex(new[] { "ValueTypeId" }, "IX_ValueTypeId");

                    b.ToTable("ProductVariantAttributeValue");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.SpecificationAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("AllowFiltering")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("FacetSorting")
                        .HasColumnType("int");

                    b.Property<int>("FacetTemplateHint")
                        .HasColumnType("int");

                    b.Property<bool>("IndexOptionNames")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("ShowOnProductPage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AllowFiltering" }, "IX_AllowFiltering")
                        .HasDatabaseName("IX_AllowFiltering1");

                    b.ToTable("SpecificationAttribute");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("MediaFileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("NumberValue")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("SpecificationAttributeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationAttributeId");

                    b.ToTable("SpecificationAttributeOption");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Brands.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowCustomersToSelectPageSize")
                        .HasColumnType("bit");

                    b.Property<string>("BottomDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("HasDiscountsApplied")
                        .HasColumnType("bit");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturerTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("MediaFileId")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("PageSize")
                        .HasColumnType("int");

                    b.Property<string>("PageSizeOptions")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PriceRanges")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MediaFileId");

                    b.HasIndex(new[] { "Deleted" }, "IX_Deleted");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Manufacturer_DisplayOrder");

                    b.HasIndex(new[] { "LimitedToStores" }, "IX_Manufacturer_LimitedToStores");

                    b.HasIndex(new[] { "SubjectToAcl" }, "IX_SubjectToAcl");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Brands.ManufacturerTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("ManufacturerTemplate");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Brands.ProductManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsFeaturedProduct")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "IsFeaturedProduct" }, "IX_IsFeaturedProduct");

                    b.HasIndex(new[] { "ManufacturerId", "ProductId" }, "IX_PMM_Product_and_Manufacturer");

                    b.ToTable("Product_Manufacturer_Mapping");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("AllowCustomersToSelectPageSize")
                        .HasColumnType("bit");

                    b.Property<int>("BadgeStyle")
                        .HasColumnType("int");

                    b.Property<string>("BadgeText")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("BottomDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultViewMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("HasDiscountsApplied")
                        .HasColumnType("bit");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<int?>("MediaFileId")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("PageSize")
                        .HasColumnType("int");

                    b.Property<string>("PageSizeOptions")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PriceRanges")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowOnHomePage")
                        .HasColumnType("bit");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MediaFileId");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Category_DisplayOrder");

                    b.HasIndex(new[] { "LimitedToStores" }, "IX_Category_LimitedToStores");

                    b.HasIndex(new[] { "ParentCategoryId" }, "IX_Category_ParentCategoryId");

                    b.HasIndex(new[] { "SubjectToAcl" }, "IX_Category_SubjectToAcl");

                    b.HasIndex(new[] { "Deleted" }, "IX_Deleted")
                        .HasDatabaseName("IX_Deleted1");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Categories.CategoryTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("CategoryTemplate");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Categories.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsFeaturedProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemMapping")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "IsFeaturedProduct" }, "IX_IsFeaturedProduct")
                        .HasDatabaseName("IX_IsFeaturedProduct1");

                    b.HasIndex(new[] { "IsSystemMapping" }, "IX_IsSystemMapping");

                    b.HasIndex(new[] { "CategoryId", "ProductId" }, "IX_PCM_Product_and_Category");

                    b.ToTable("Product_Category_Mapping");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Discounts.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CouponCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("DiscountLimitationId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("DiscountTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("LimitationTimes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("RequiresCouponCode")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UsePercentage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Discounts.DiscountUsageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderId");

                    b.ToTable("DiscountUsageHistory");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Pricing.TierPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalculationMethod")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerRoleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex("ProductId");

                    b.ToTable("TierPrice");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.BackInStockSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BackInStockSubscription");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.CrossSellProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId1")
                        .HasColumnType("int");

                    b.Property<int>("ProductId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CrossSellProduct");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdditionalShippingCharge")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("AdminComment")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("AllowBackInStockSubscriptions")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowCustomerReviews")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedQuantities")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ApprovedRatingSum")
                        .HasColumnType("int");

                    b.Property<int>("ApprovedTotalReviews")
                        .HasColumnType("int");

                    b.Property<int>("AttributeChoiceBehaviour")
                        .HasColumnType("int");

                    b.Property<bool>("AutomaticallyAddRequiredProducts")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AvailableEndDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AvailableForPreOrder")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AvailableStartDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("BackorderModeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("BasePriceAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("BasePriceBaseAmount")
                        .HasColumnType("int");

                    b.Property<bool>("BasePriceEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("BasePriceMeasureUnit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("BundlePerItemPricing")
                        .HasColumnType("bit");

                    b.Property<bool>("BundlePerItemShipping")
                        .HasColumnType("bit");

                    b.Property<bool>("BundlePerItemShoppingCart")
                        .HasColumnType("bit");

                    b.Property<string>("BundleTitleText")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("CallForPrice")
                        .HasColumnType("bit");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<int?>("CountryOfOriginId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CustomerEntersPrice")
                        .HasColumnType("bit");

                    b.Property<string>("CustomsTariffNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DeliveryTimeId")
                        .HasColumnType("int");

                    b.Property<bool>("DisableBuyButton")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableWishlistButton")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("DisplayStockAvailability")
                        .HasColumnType("bit");

                    b.Property<bool>("DisplayStockQuantity")
                        .HasColumnType("bit");

                    b.Property<int>("DownloadActivationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("DownloadExpirationDays")
                        .HasColumnType("int");

                    b.Property<int>("DownloadId")
                        .HasColumnType("int");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GiftCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Gtin")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("HasDiscountsApplied")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPreviewPicture")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSampleDownload")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTierPrices")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUserAgreement")
                        .HasColumnType("bit");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("HideQuantityControl")
                        .HasColumnType("bit");

                    b.Property<int>("HomePageDisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDownload")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEsd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreeShipping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGiftCard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShippingEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("IsShipEnabled");

                    b.Property<bool>("IsSystemProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("bit");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<int>("LowStockActivityId")
                        .HasColumnType("int");

                    b.Property<decimal?>("LowestAttributeCombinationPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("MainPictureId")
                        .HasColumnType("int");

                    b.Property<int>("ManageInventoryMethodId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("MaxNumberOfDownloads")
                        .HasColumnType("int");

                    b.Property<decimal>("MaximumCustomerEnteredPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("MinStockQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumCustomerEnteredPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("NotApprovedRatingSum")
                        .HasColumnType("int");

                    b.Property<int>("NotApprovedTotalReviews")
                        .HasColumnType("int");

                    b.Property<int>("NotifyAdminForQuantityBelow")
                        .HasColumnType("int");

                    b.Property<decimal>("OldPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("OrderMaximumQuantity")
                        .HasColumnType("int");

                    b.Property<int>("OrderMinimumQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ParentGroupedProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ProductCost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int>("QuantityStep")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityUnitId")
                        .HasColumnType("int");

                    b.Property<int>("QuantiyControlType")
                        .HasColumnType("int");

                    b.Property<int>("RecurringCycleLength")
                        .HasColumnType("int");

                    b.Property<int>("RecurringCyclePeriodId")
                        .HasColumnType("int");

                    b.Property<int>("RecurringTotalCycles")
                        .HasColumnType("int");

                    b.Property<bool>("RequireOtherProducts")
                        .HasColumnType("bit");

                    b.Property<string>("RequiredProductIds")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SampleDownloadId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("ShowOnHomePage")
                        .HasColumnType("bit");

                    b.Property<string>("Sku")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<decimal?>("SpecialPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("SpecialPriceEndDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SpecialPriceStartDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("bit");

                    b.Property<string>("SystemName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("TaxCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("UnlimitedDownloads")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgreementText")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.Property<bool>("VisibleIndividually")
                        .HasColumnType("bit");

                    b.Property<decimal>("Weight")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CountryOfOriginId");

                    b.HasIndex("DeliveryTimeId");

                    b.HasIndex("QuantityUnitId");

                    b.HasIndex("SampleDownloadId");

                    b.HasIndex(new[] { "Deleted" }, "IX_Deleted")
                        .HasDatabaseName("IX_Deleted2");

                    b.HasIndex(new[] { "Gtin" }, "IX_Gtin")
                        .HasDatabaseName("IX_Gtin1");

                    b.HasIndex(new[] { "IsSystemProduct" }, "IX_IsSystemProduct");

                    b.HasIndex(new[] { "ManufacturerPartNumber" }, "IX_ManufacturerPartNumber")
                        .HasDatabaseName("IX_ManufacturerPartNumber1");

                    b.HasIndex(new[] { "LimitedToStores" }, "IX_Product_LimitedToStores");

                    b.HasIndex(new[] { "Name" }, "IX_Product_Name");

                    b.HasIndex(new[] { "ParentGroupedProductId" }, "IX_Product_ParentGroupedProductId");

                    b.HasIndex(new[] { "Price", "AvailableStartDateTimeUtc", "AvailableEndDateTimeUtc", "Published", "Deleted" }, "IX_Product_PriceDatesEtc");

                    b.HasIndex(new[] { "Published" }, "IX_Product_Published");

                    b.HasIndex(new[] { "Published", "Deleted", "IsSystemProduct" }, "IX_Product_Published_Deleted_IsSystemProduct");

                    b.HasIndex(new[] { "ShowOnHomePage" }, "IX_Product_ShowOnHomepage");

                    b.HasIndex(new[] { "Sku" }, "IX_Product_Sku");

                    b.HasIndex(new[] { "SubjectToAcl" }, "IX_Product_SubjectToAcl");

                    b.HasIndex(new[] { "SystemName", "IsSystemProduct" }, "IX_Product_SystemName_IsSystemProduct");

                    b.HasIndex(new[] { "Published", "Id", "Visibility", "Deleted", "IsSystemProduct", "AvailableStartDateTimeUtc", "AvailableEndDateTimeUtc" }, "IX_SeekExport1");

                    b.HasIndex(new[] { "Visibility" }, "IX_Visibility");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductBundleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BundleProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("DiscountPercentage")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("FilterAttributes")
                        .HasColumnType("bit");

                    b.Property<bool>("HideThumbnail")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BundleProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBundleItem");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductBundleItemAttributeFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int");

                    b.Property<int>("BundleItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BundleItemId");

                    b.ToTable("ProductBundleItemAttributeFilter");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductMediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("MediaFileId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaFileId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_MediaFile_Mapping");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ProductTag_Name");

                    b.HasIndex(new[] { "Published" }, "IX_ProductTag_Published");

                    b.ToTable("ProductTag");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("ProductTemplate");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.RelatedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("ProductId1")
                        .HasColumnType("int");

                    b.Property<int>("ProductId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId1" }, "IX_RelatedProduct_ProductId1");

                    b.ToTable("RelatedProduct");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Affiliates.Affiliate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Affiliate");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Attributes.CheckoutAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("bit");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("ShippableProductRequired")
                        .HasColumnType("bit");

                    b.Property<int>("TaxCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TextPrompt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CheckoutAttribute");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CheckoutAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("bit");

                    b.Property<int?>("MediaFileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<decimal>("PriceAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("WeightAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CheckoutAttributeId");

                    b.HasIndex("MediaFileId");

                    b.ToTable("CheckoutAttributeValue");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Cart.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BundleItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CustomerEnteredPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentItemId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawAttributes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AttributesXml");

                    b.Property<int>("ShoppingCartTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BundleItemId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "ShoppingCartTypeId", "CustomerId" }, "IX_ShoppingCartItem_ShoppingCartTypeId_CustomerId");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.GiftCards.GiftCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("GiftCardCouponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GiftCardTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsGiftCardActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecipientNotified")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchasedWithOrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PurchasedWithOrderItemId");

                    b.ToTable("GiftCard");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.GiftCards.GiftCardUsageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("GiftCardId")
                        .HasColumnType("int");

                    b.Property<decimal>("UsedValue")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("UsedWithOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GiftCardId");

                    b.HasIndex("UsedWithOrderId");

                    b.ToTable("GiftCardUsageHistory");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcceptThirdPartyEmailHandOver")
                        .HasColumnType("bit");

                    b.Property<int>("AffiliateId")
                        .HasColumnType("int");

                    b.Property<bool>("AllowStoringCreditCardNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowStoringDirectDebit")
                        .HasColumnType("bit");

                    b.Property<string>("AuthorizationTransactionCode")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("AuthorizationTransactionId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("AuthorizationTransactionResult")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("CaptureTransactionId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CaptureTransactionResult")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CardCvv2")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CardExpirationMonth")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CardExpirationYear")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CardName")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CardType")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CheckoutAttributeDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditBalance")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CurrencyRate")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("CustomerCurrencyCode")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerIp")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("CustomerLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerOrderComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerTaxDisplayTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DirectDebitAccountHolder")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DirectDebitAccountNumber")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DirectDebitBIC")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DirectDebitBankCode")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DirectDebitBankName")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DirectDebitCountry")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DirectDebitIban")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("HasNewPaymentNotification")
                        .HasColumnType("bit");

                    b.Property<string>("MaskedCreditCardNumber")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("OrderDiscount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("OrderGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("OrderShippingExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderShippingInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderShippingTaxRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderSubTotalDiscountExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderSubTotalDiscountInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderSubtotalExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderSubtotalInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderTotal")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderTotalRounding")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("PaidDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaymentMethodAdditionalFeeExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PaymentMethodAdditionalFeeInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PaymentMethodAdditionalFeeTaxRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("PaymentMethodSystemName")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RawAttributes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("CheckoutAttributesXml");

                    b.Property<decimal>("RefundedAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("RewardPointsRemaining")
                        .HasColumnType("int");

                    b.Property<bool>("RewardPointsWereAdded")
                        .HasColumnType("bit");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ShippingRateComputationMethodSystemName")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("ShippingStatusId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("SubscriptionTransactionId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("TaxRates")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex(new[] { "Deleted" }, "IX_Deleted")
                        .HasDatabaseName("IX_Deleted3");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Order_CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Orders.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BundleData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeliveryTimeId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmountExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("DiscountAmountInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("DisplayDeliveryTime")
                        .HasColumnType("bit");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDownloadActivated")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ItemWeight")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("LicenseDownloadId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderItemGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PriceInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ProductCost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawAttributes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AttributesXml");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("UnitPriceExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("UnitPriceInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Orders.OrderNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DisplayToCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderNote");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Orders.ReturnRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerComments")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForReturn")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool?>("RefundToWallet")
                        .HasColumnType("bit");

                    b.Property<string>("RequestedAction")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("RequestedActionUpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReturnRequestStatusId")
                        .HasColumnType("int");

                    b.Property<string>("StaffNotes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ReturnRequest");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Payment.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethodSystemName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("RoundOrderTotalEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Payment.RecurringPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("CycleLength")
                        .HasColumnType("int");

                    b.Property<int>("CyclePeriodId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("InitialOrderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalCycles")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InitialOrderId");

                    b.ToTable("RecurringPayment");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Payment.RecurringPaymentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("RecurringPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecurringPaymentId");

                    b.ToTable("RecurringPaymentHistory");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Shipping.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShippedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TotalWeight")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Shipping.ShipmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentItem");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Shipping.ShippingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IgnoreCharges")
                        .HasColumnType("bit");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("ShippingMethod");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Tax.TaxCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("TaxCategory");
                });

            modelBuilder.Entity("Smartstore.Core.Common.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salutation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Smartstore.Core.Common.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowsBilling")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowsShipping")
                        .HasColumnType("bit");

                    b.Property<int?>("DefaultCurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("DisplayCookieManager")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumericIsoCode")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("SubjectToVat")
                        .HasColumnType("bit");

                    b.Property<string>("ThreeLetterIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoLetterIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultCurrencyId");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Country_DisplayOrder");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Smartstore.Core.Common.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CustomFormatting")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayLocale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("DomainEndings")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rate")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("RoundNumDecimals")
                        .HasColumnType("int");

                    b.Property<bool>("RoundOrderItemsEnabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("RoundOrderTotalDenominator")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("RoundOrderTotalEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("RoundOrderTotalRule")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Currency_DisplayOrder");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Smartstore.Core.Common.DeliveryTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorHexValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayLocale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxDays")
                        .HasColumnType("int");

                    b.Property<int?>("MinDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryTime");
                });

            modelBuilder.Entity("Smartstore.Core.Common.GenericAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("KeyGroup")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex(new[] { "EntityId", "KeyGroup" }, "IX_GenericAttribute_EntityId_and_KeyGroup");

                    b.ToTable("GenericAttribute");
                });

            modelBuilder.Entity("Smartstore.Core.Common.MeasureDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Ratio")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MeasureDimension");
                });

            modelBuilder.Entity("Smartstore.Core.Common.MeasureWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Ratio")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("SystemKeyword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasureWeight");
                });

            modelBuilder.Entity("Smartstore.Core.Common.QuantityUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayLocale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NamePlural")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("QuantityUnit");
                });

            modelBuilder.Entity("Smartstore.Core.Common.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("IX_StateProvince_CountryId")
                        .HasAnnotation("SqlServer:Include", new[] { "DisplayOrder" });

                    b.ToTable("StateProvince");
                });

            modelBuilder.Entity("Smartstore.Core.Configuration.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("StoreId");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.Download", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Changelog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DownloadGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DownloadUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileVersion")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsTransient")
                        .HasColumnType("bit");

                    b.Property<int?>("MediaFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseDownloadUrl")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MediaFileId");

                    b.HasIndex(new[] { "DownloadGuid" }, "IX_DownloadGuid");

                    b.HasIndex(new[] { "EntityId", "EntityName" }, "IX_EntityId_EntityName");

                    b.HasIndex(new[] { "UpdatedOnUtc", "IsTransient" }, "IX_UpdatedOn_IsTransient");

                    b.ToTable("Download");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransient")
                        .HasColumnType("bit");

                    b.Property<int?>("MediaStorageId")
                        .HasColumnType("int");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("PixelSize")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaStorageId");

                    b.HasIndex(new[] { "FolderId", "Extension", "PixelSize", "Deleted" }, "IX_Media_Extension");

                    b.HasIndex(new[] { "FolderId", "Deleted" }, "IX_Media_FolderId");

                    b.HasIndex(new[] { "FolderId", "MediaType", "Extension", "PixelSize", "Deleted" }, "IX_Media_MediaType");

                    b.HasIndex(new[] { "FolderId", "Name", "Deleted" }, "IX_Media_Name");

                    b.HasIndex(new[] { "FolderId", "PixelSize", "Deleted" }, "IX_Media_PixelSize");

                    b.HasIndex(new[] { "FolderId", "Size", "Deleted" }, "IX_Media_Size");

                    b.HasIndex(new[] { "FolderId", "Deleted" }, "IX_Media_UpdatedOnUtc");

                    b.ToTable("MediaFile");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.MediaFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanDetectTracks")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("FilesCount")
                        .HasColumnType("int");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentId", "Name" }, "IX_NameParentId")
                        .IsUnique()
                        .HasFilter("[ParentId] IS NOT NULL");

                    b.ToTable("MediaFolder");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MediaFolder");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.MediaStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("MediaStorage");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.MediaTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_MediaTag_Name");

                    b.ToTable("MediaTag");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.MediaTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Album")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MediaFileId")
                        .HasColumnType("int");

                    b.Property<string>("Property")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Album" }, "IX_Album");

                    b.HasIndex(new[] { "MediaFileId", "EntityId", "EntityName", "Property" }, "IX_MediaTrack_Composite");

                    b.ToTable("MediaTrack");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Menus.MenuEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsSystemMenu")
                        .HasColumnType("bit");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("bit");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Template")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Title")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("WidgetZone")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LimitedToStores" }, "IX_Menu_LimitedToStores");

                    b.HasIndex(new[] { "Published" }, "IX_Menu_Published");

                    b.HasIndex(new[] { "SubjectToAcl" }, "IX_Menu_SubjectToAcl");

                    b.HasIndex(new[] { "SystemName", "IsSystemMenu" }, "IX_Menu_SystemName_IsSystemMenu");

                    b.ToTable("MenuRecord");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Menus.MenuItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BeginGroup")
                        .HasColumnType("bit");

                    b.Property<string>("CssClass")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("HtmlId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IconColor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewWindow")
                        .HasColumnType("bit");

                    b.Property<bool>("NoFollow")
                        .HasColumnType("bit");

                    b.Property<int>("ParentItemId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("ShowExpanded")
                        .HasColumnType("bit");

                    b.Property<string>("Style")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_MenuItem_DisplayOrder");

                    b.HasIndex(new[] { "LimitedToStores" }, "IX_MenuItem_LimitedToStores");

                    b.HasIndex(new[] { "ParentItemId" }, "IX_MenuItem_ParentItemId");

                    b.HasIndex(new[] { "Published" }, "IX_MenuItem_Published");

                    b.HasIndex(new[] { "SubjectToAcl" }, "IX_MenuItem_SubjectToAcl");

                    b.ToTable("MenuItemRecord");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Topics.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyCssClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CookieType")
                        .HasColumnType("int");

                    b.Property<string>("HtmlId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncludeInSitemap")
                        .HasColumnType("bit");

                    b.Property<string>("Intro")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPasswordProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemTopic")
                        .HasColumnType("bit");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("RenderAsWidget")
                        .HasColumnType("bit");

                    b.Property<string>("ShortTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("bit");

                    b.Property<string>("SystemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WidgetBordered")
                        .HasColumnType("bit");

                    b.Property<bool>("WidgetShowTitle")
                        .HasColumnType("bit");

                    b.Property<bool?>("WidgetWrapContent")
                        .HasColumnType("bit");

                    b.Property<string>("WidgetZone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AdminComment")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("AffiliateId")
                        .HasColumnType("int");

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int")
                        .HasColumnName("BillingAddress_Id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Company")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("FullName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSystemAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastForumVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastIpAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastLoginDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("LastUserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUserDeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PasswordFormatId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Salutation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingAddress_Id");

                    b.Property<string>("SystemName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TaxDisplayTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("VatNumberStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId")
                        .IsUnique()
                        .HasFilter("[BillingAddress_Id] IS NOT NULL");

                    b.HasIndex("ShippingAddressId")
                        .IsUnique()
                        .HasFilter("[ShippingAddress_Id] IS NOT NULL");

                    b.HasIndex(new[] { "BirthDate" }, "IX_Customer_BirthDate");

                    b.HasIndex(new[] { "Company" }, "IX_Customer_Company");

                    b.HasIndex(new[] { "CreatedOnUtc" }, "IX_Customer_CreatedOn");

                    b.HasIndex(new[] { "CustomerGuid" }, "IX_Customer_CustomerGuid");

                    b.HasIndex(new[] { "CustomerNumber" }, "IX_Customer_CustomerNumber");

                    b.HasIndex(new[] { "Deleted", "IsSystemAccount" }, "IX_Customer_Deleted_IsSystemAccount");

                    b.HasIndex(new[] { "Email" }, "IX_Customer_Email");

                    b.HasIndex(new[] { "FullName" }, "IX_Customer_FullName");

                    b.HasIndex(new[] { "LastActivityDateUtc" }, "IX_Customer_LastActivity");

                    b.HasIndex(new[] { "LastIpAddress" }, "IX_Customer_LastIpAddress");

                    b.HasIndex(new[] { "Username" }, "IX_Customer_Username");

                    b.HasIndex(new[] { "Deleted" }, "IX_Deleted")
                        .HasDatabaseName("IX_Deleted4");

                    b.HasIndex(new[] { "IsSystemAccount" }, "IX_IsSystemAccount");

                    b.HasIndex(new[] { "SystemName" }, "IX_SystemName");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.CustomerContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContent");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.CustomerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("FreeShipping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("OrderTotalMaximum")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OrderTotalMinimum")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SystemName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TaxDisplayType")
                        .HasColumnType("int");

                    b.Property<bool>("TaxExempt")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "IX_Active");

                    b.HasIndex(new[] { "SystemName", "IsSystemRole" }, "IX_CustomerRole_SystemName_IsSystemRole");

                    b.HasIndex(new[] { "IsSystemRole" }, "IX_IsSystemRole");

                    b.HasIndex(new[] { "SystemName" }, "IX_SystemName")
                        .HasDatabaseName("IX_SystemName1");

                    b.ToTable("CustomerRole");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.CustomerRoleMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerRoleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSystemMapping")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex(new[] { "IsSystemMapping" }, "IX_IsSystemMapping")
                        .HasDatabaseName("IX_IsSystemMapping1");

                    b.ToTable("CustomerRoleMapping");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.ExternalAuthenticationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ExternalDisplayIdentifier")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ExternalIdentifier")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("OAuthAccessToken")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("OAuthToken")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ProviderSystemName")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ExternalAuthenticationRecord");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.RewardPointsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("PointsBalance")
                        .HasColumnType("int");

                    b.Property<decimal>("UsedAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("UsedWithOrderId")
                        .HasColumnType("int")
                        .HasColumnName("UsedWithOrder_Id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UsedWithOrderId")
                        .IsUnique()
                        .HasFilter("[UsedWithOrder_Id] IS NOT NULL");

                    b.ToTable("RewardPointsHistory");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.WalletHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("AmountBalance")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("AmountBalancePerStore")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("Reason")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex(new[] { "StoreId", "CreatedOnUtc" }, "IX_StoreId_CreatedOn");

                    b.ToTable("WalletHistory");
                });

            modelBuilder.Entity("Smartstore.Core.Localization.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FlagImageFileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("Rtl")
                        .HasColumnType("bit");

                    b.Property<string>("UniqueSeoCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Language_DisplayOrder");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Smartstore.Core.Localization.LocaleStringResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsFromPlugin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTouched")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ResourceValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex(new[] { "ResourceName", "LanguageId" }, "IX_LocaleStringResource");

                    b.ToTable("LocaleStringResource");
                });

            modelBuilder.Entity("Smartstore.Core.Localization.LocalizedProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LocaleKey")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("LocaleKeyGroup")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("LocaleValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_LocalizedProperty_Key")
                        .HasAnnotation("SqlServer:Include", new[] { "EntityId", "LocaleKeyGroup", "LocaleKey" });

                    b.HasIndex("LanguageId");

                    b.HasIndex(new[] { "EntityId", "LocaleKey", "LocaleKeyGroup", "LanguageId" }, "IX_LocalizedProperty_Compound");

                    b.HasIndex(new[] { "LocaleKeyGroup" }, "IX_LocalizedProperty_LocaleKeyGroup");

                    b.ToTable("LocalizedProperty");
                });

            modelBuilder.Entity("Smartstore.Core.Logging.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityLogTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLogTypeId")
                        .IsUnique();

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex(new[] { "CreatedOnUtc" }, "IX_ActivityLog_CreatedOnUtc");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Smartstore.Core.Logging.ActivityLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogType");
                });

            modelBuilder.Entity("Smartstore.Core.Logging.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("FullMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LogLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Logger")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PageUrl")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("ReferrerUrl")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("ShortMessage")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex(new[] { "CreatedOnUtc" }, "IX_Log_CreatedOnUtc");

                    b.HasIndex(new[] { "LogLevelId" }, "IX_Log_Level");

                    b.HasIndex(new[] { "Logger" }, "IX_Log_Logger");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Smartstore.Core.Messages.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("Smartstore.Core.Messages.EmailAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<bool>("UseDefaultCredentials")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("EmailAccount");
                });

            modelBuilder.Entity("Smartstore.Core.Messages.MessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Attachment1FileId")
                        .HasColumnType("int");

                    b.Property<int?>("Attachment2FileId")
                        .HasColumnType("int");

                    b.Property<int?>("Attachment3FileId")
                        .HasColumnType("int");

                    b.Property<string>("BccEmailAddresses")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModelTree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<string>("ModelTypes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReplyTo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("SendManually")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("MessageTemplate");
                });

            modelBuilder.Entity("Smartstore.Core.Messages.NewsletterSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("NewsletterSubscriptionGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NewsLetterSubscriptionGuid");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "IX_Active")
                        .HasDatabaseName("IX_Active1");

                    b.HasIndex(new[] { "Email", "StoreId" }, "IX_NewsletterSubscription_Email_StoreId");

                    b.ToTable("NewsLetterSubscription");
                });

            modelBuilder.Entity("Smartstore.Core.Messages.QueuedEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bcc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CC")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailAccountId")
                        .HasColumnType("int");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ReplyTo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("SendManually")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SentOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SentTries")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmailAccountId" }, "IX_EmailAccountId");

                    b.HasIndex(new[] { "CreatedOnUtc" }, "[IX_QueuedEmail_CreatedOnUtc]");

                    b.ToTable("QueuedEmail");
                });

            modelBuilder.Entity("Smartstore.Core.Messages.QueuedEmailAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MediaFileId")
                        .HasColumnType("int");

                    b.Property<int?>("MediaStorageId")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("QueuedEmailId")
                        .HasColumnType("int");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MediaFileId" }, "IX_MediaFileId");

                    b.HasIndex(new[] { "MediaStorageId" }, "IX_MediaStorageId");

                    b.HasIndex(new[] { "QueuedEmailId" }, "IX_QueuedEmailId");

                    b.ToTable("QueuedEmailAttachment");
                });

            modelBuilder.Entity("Smartstore.Core.Rules.RuleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RuleSetId")
                        .HasColumnType("int");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RuleSetId");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_PageBuilder_DisplayOrder");

                    b.HasIndex(new[] { "RuleType" }, "IX_PageBuilder_RuleType");

                    b.ToTable("Rule");
                });

            modelBuilder.Entity("Smartstore.Core.Rules.RuleSetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubGroup")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogicalOperator")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IsSubGroup" }, "IX_IsSubGroup");

                    b.HasIndex(new[] { "IsActive", "Scope" }, "IX_RuleSetEntity_Scope");

                    b.ToTable("RuleSet");
                });

            modelBuilder.Entity("Smartstore.Core.Security.AclRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerRoleId")
                        .HasColumnType("int");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsIdle")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex(new[] { "EntityId", "EntityName" }, "IX_AclRecord_EntityId_EntityName");

                    b.HasIndex(new[] { "IsIdle" }, "IX_AclRecord_IsIdle");

                    b.ToTable("AclRecord");
                });

            modelBuilder.Entity("Smartstore.Core.Security.PermissionRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SystemName" }, "IX_SystemName")
                        .HasDatabaseName("IX_SystemName2");

                    b.ToTable("PermissionRecord");
                });

            modelBuilder.Entity("Smartstore.Core.Security.PermissionRoleMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Allow")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerRoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex("PermissionRecordId");

                    b.ToTable("PermissionRoleMapping");
                });

            modelBuilder.Entity("Smartstore.Core.Seo.NamedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NamedEntity");
                });

            modelBuilder.Entity("Smartstore.Core.Seo.UrlRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Slug" }, "IX_UrlRecord_Slug")
                        .IsUnique();

                    b.ToTable("UrlRecord");
                });

            modelBuilder.Entity("Smartstore.Core.Stores.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppleTouchIconMediaFileId")
                        .HasColumnType("int");

                    b.Property<string>("ContentDeliveryNetwork")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("FavIconMediaFileId")
                        .HasColumnType("int");

                    b.Property<bool>("ForceSslForAllPages")
                        .HasColumnType("bit");

                    b.Property<string>("Hosts")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HtmlBodyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogoMediaFileId")
                        .HasColumnType("int");

                    b.Property<string>("MsTileColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MsTileImageMediaFileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("PngIconMediaFileId")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryExchangeRateCurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryStoreCurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("SecureUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("SslEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryExchangeRateCurrencyId");

                    b.HasIndex("PrimaryStoreCurrencyId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Smartstore.Core.Stores.StoreMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EntityId", "EntityName" }, "IX_StoreMapping_EntityId_EntityName");

                    b.ToTable("StoreMapping");
                });

            modelBuilder.Entity("Smartstore.Scheduling.TaskDescriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CronExpression")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("NextRunUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("RunPerMachine")
                        .HasColumnType("bit");

                    b.Property<bool>("StopOnError")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Type");

                    b.HasIndex("NextRunUtc", "Enabled")
                        .HasDatabaseName("IX_NextRun_Enabled");

                    b.ToTable("ScheduleTask");
                });

            modelBuilder.Entity("Smartstore.Scheduling.TaskExecutionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("bit");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ProgressMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProgressPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SucceededOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskDescriptorId")
                        .HasColumnType("int")
                        .HasColumnName("ScheduleTaskId");

                    b.HasKey("Id");

                    b.HasIndex("TaskDescriptorId");

                    b.HasIndex("MachineName", "IsRunning")
                        .HasDatabaseName("IX_MachineName_IsRunning");

                    b.HasIndex("StartedOnUtc", "FinishedOnUtc")
                        .HasDatabaseName("IX_Started_Finished");

                    b.ToTable("ScheduleTaskHistory");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.MediaAlbum", b =>
                {
                    b.HasBaseType("Smartstore.Core.Content.Media.MediaFolder");

                    b.Property<bool>("IncludePath")
                        .HasColumnType("bit");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ResKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MediaAlbum");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductReview", b =>
                {
                    b.HasBaseType("Smartstore.Core.Identity.CustomerContent");

                    b.Property<int>("HelpfulNoTotal")
                        .HasColumnType("int");

                    b.Property<int>("HelpfulYesTotal")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReview");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductReviewHelpfulness", b =>
                {
                    b.HasBaseType("Smartstore.Core.Identity.CustomerContent");

                    b.Property<int>("ProductReviewId")
                        .HasColumnType("int");

                    b.Property<bool>("WasHelpful")
                        .HasColumnType("bit");

                    b.HasIndex("ProductReviewId");

                    b.ToTable("ProductReviewHelpfulness");
                });

            modelBuilder.Entity("CustomerAddresses", b =>
                {
                    b.HasOne("Smartstore.Core.Common.Address", null)
                        .WithMany()
                        .HasForeignKey("Address_Id")
                        .HasConstraintName("FK_dbo.CustomerAddresses_dbo.Address_Address_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Identity.Customer", null)
                        .WithMany()
                        .HasForeignKey("Customer_Id")
                        .HasConstraintName("FK_dbo.CustomerAddresses_dbo.Customer_Customer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discount_AppliedToCategories", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("Category_Id")
                        .HasConstraintName("FK_dbo.Discount_AppliedToCategories_dbo.Category_Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Catalog.Discounts.Discount", null)
                        .WithMany()
                        .HasForeignKey("Discount_Id")
                        .HasConstraintName("FK_dbo.Discount_AppliedToCategories_dbo.Discount_Discount_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discount_AppliedToManufacturers", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Discounts.Discount", null)
                        .WithMany()
                        .HasForeignKey("Discount_Id")
                        .HasConstraintName("FK_dbo.Discount_AppliedToManufacturers_dbo.Discount_Discount_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Catalog.Brands.Manufacturer", null)
                        .WithMany()
                        .HasForeignKey("Manufacturer_Id")
                        .HasConstraintName("FK_dbo.Discount_AppliedToManufacturers_dbo.Manufacturer_Manufacturer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discount_AppliedToProducts", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Discounts.Discount", null)
                        .WithMany()
                        .HasForeignKey("Discount_Id")
                        .HasConstraintName("FK_dbo.Discount_AppliedToProducts_dbo.Discount_Discount_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .HasConstraintName("FK_dbo.Discount_AppliedToProducts_dbo.Product_Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaFile_Tag_Mapping", b =>
                {
                    b.HasOne("Smartstore.Core.Content.Media.MediaFile", null)
                        .WithMany()
                        .HasForeignKey("MediaFile_Id")
                        .HasConstraintName("FK_dbo.MediaFile_Tag_Mapping_dbo.MediaFile_MediaFile_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Content.Media.MediaTag", null)
                        .WithMany()
                        .HasForeignKey("MediaTag_Id")
                        .HasConstraintName("FK_dbo.MediaFile_Tag_Mapping_dbo.MediaTag_MediaTag_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Product_ProductTag_Mapping", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Products.ProductTag", null)
                        .WithMany()
                        .HasForeignKey("ProductTag_Id")
                        .HasConstraintName("FK_dbo.Product_ProductTag_Mapping_dbo.ProductTag_ProductTag_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .HasConstraintName("FK_dbo.Product_ProductTag_Mapping_dbo.Product_Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleSet_Category_Mapping", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("Category_Id")
                        .HasConstraintName("FK_dbo.RuleSet_Category_Mapping_dbo.Category_Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Rules.RuleSetEntity", null)
                        .WithMany()
                        .HasForeignKey("RuleSetEntity_Id")
                        .HasConstraintName("FK_dbo.RuleSet_Category_Mapping_dbo.RuleSet_RuleSetEntity_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleSet_CustomerRole_Mapping", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.CustomerRole", null)
                        .WithMany()
                        .HasForeignKey("CustomerRole_Id")
                        .HasConstraintName("FK_dbo.RuleSet_CustomerRole_Mapping_dbo.CustomerRole_CustomerRole_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Rules.RuleSetEntity", null)
                        .WithMany()
                        .HasForeignKey("RuleSetEntity_Id")
                        .HasConstraintName("FK_dbo.RuleSet_CustomerRole_Mapping_dbo.RuleSet_RuleSetEntity_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleSet_Discount_Mapping", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Discounts.Discount", null)
                        .WithMany()
                        .HasForeignKey("Discount_Id")
                        .HasConstraintName("FK_dbo.RuleSet_Discount_Mapping_dbo.Discount_Discount_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Rules.RuleSetEntity", null)
                        .WithMany()
                        .HasForeignKey("RuleSetEntity_Id")
                        .HasConstraintName("FK_dbo.RuleSet_Discount_Mapping_dbo.RuleSet_RuleSetEntity_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleSet_PaymentMethod_Mapping", b =>
                {
                    b.HasOne("Smartstore.Core.Checkout.Payment.PaymentMethod", null)
                        .WithMany()
                        .HasForeignKey("PaymentMethod_Id")
                        .HasConstraintName("FK_dbo.RuleSet_PaymentMethod_Mapping_dbo.PaymentMethod_PaymentMethod_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Rules.RuleSetEntity", null)
                        .WithMany()
                        .HasForeignKey("RuleSetEntity_Id")
                        .HasConstraintName("FK_dbo.RuleSet_PaymentMethod_Mapping_dbo.RuleSet_RuleSetEntity_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleSet_ShippingMethod_Mapping", b =>
                {
                    b.HasOne("Smartstore.Core.Rules.RuleSetEntity", null)
                        .WithMany()
                        .HasForeignKey("RuleSetEntity_Id")
                        .HasConstraintName("FK_dbo.RuleSet_ShippingMethod_Mapping_dbo.RuleSet_RuleSetEntity_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Checkout.Shipping.ShippingMethod", null)
                        .WithMany()
                        .HasForeignKey("ShippingMethod_Id")
                        .HasConstraintName("FK_dbo.RuleSet_ShippingMethod_Mapping_dbo.ShippingMethod_ShippingMethod_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductAttributeOption", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Attributes.ProductAttributeOptionsSet", "ProductAttributeOptionsSet")
                        .WithMany("ProductAttributeOptions")
                        .HasForeignKey("ProductAttributeOptionsSetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProductAttributeOptionsSet");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductAttributeOptionsSet", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Attributes.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeOptionsSets")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany("ProductSpecificationAttributes")
                        .HasForeignKey("ProductId");

                    b.HasOne("Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption", "SpecificationAttributeOption")
                        .WithMany("ProductSpecificationAttributes")
                        .HasForeignKey("SpecificationAttributeOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SpecificationAttributeOption");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductVariantAttribute", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Attributes.ProductAttribute", "ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany("ProductVariantAttributes")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination", b =>
                {
                    b.HasOne("Smartstore.Core.Common.DeliveryTime", "DeliveryTime")
                        .WithMany()
                        .HasForeignKey("DeliveryTimeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany("ProductVariantAttributeCombinations")
                        .HasForeignKey("ProductId");

                    b.HasOne("Smartstore.Core.Common.QuantityUnit", "QuantityUnit")
                        .WithMany()
                        .HasForeignKey("QuantityUnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DeliveryTime");

                    b.Navigation("Product");

                    b.Navigation("QuantityUnit");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Attributes.ProductVariantAttribute", "ProductVariantAttribute")
                        .WithMany("ProductVariantAttributeValues")
                        .HasForeignKey("ProductVariantAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariantAttribute");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Attributes.SpecificationAttribute", "SpecificationAttribute")
                        .WithMany("SpecificationAttributeOptions")
                        .HasForeignKey("SpecificationAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecificationAttribute");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Brands.Manufacturer", b =>
                {
                    b.HasOne("Smartstore.Core.Content.Media.MediaFile", "MediaFile")
                        .WithMany()
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Brands.ProductManufacturer", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Brands.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany("ProductManufacturers")
                        .HasForeignKey("ProductId");

                    b.Navigation("Manufacturer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Categories.Category", b =>
                {
                    b.HasOne("Smartstore.Core.Content.Media.MediaFile", "MediaFile")
                        .WithMany()
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Categories.ProductCategory", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Discounts.DiscountUsageHistory", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Discounts.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Checkout.Orders.Order", "Order")
                        .WithMany("DiscountUsageHistory")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Pricing.TierPrice", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.CustomerRole", "CustomerRole")
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany("TierPrices")
                        .HasForeignKey("ProductId");

                    b.Navigation("CustomerRole");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.BackInStockSubscription", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.Product", b =>
                {
                    b.HasOne("Smartstore.Core.Common.Country", "CountryOfOrigin")
                        .WithMany()
                        .HasForeignKey("CountryOfOriginId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Smartstore.Core.Common.DeliveryTime", "DeliveryTime")
                        .WithMany()
                        .HasForeignKey("DeliveryTimeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Smartstore.Core.Common.QuantityUnit", "QuantityUnit")
                        .WithMany()
                        .HasForeignKey("QuantityUnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Smartstore.Core.Content.Media.Download", "SampleDownload")
                        .WithMany()
                        .HasForeignKey("SampleDownloadId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CountryOfOrigin");

                    b.Navigation("DeliveryTime");

                    b.Navigation("QuantityUnit");

                    b.Navigation("SampleDownload");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductBundleItem", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "BundleProduct")
                        .WithMany("ProductBundleItems")
                        .HasForeignKey("BundleProductId");

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("BundleProduct");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductBundleItemAttributeFilter", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Products.ProductBundleItem", "BundleItem")
                        .WithMany("AttributeFilters")
                        .HasForeignKey("BundleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BundleItem");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductMediaFile", b =>
                {
                    b.HasOne("Smartstore.Core.Content.Media.MediaFile", "MediaFile")
                        .WithMany("ProductMediaFiles")
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaFile");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Affiliates.Affiliate", b =>
                {
                    b.HasOne("Smartstore.Core.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue", b =>
                {
                    b.HasOne("Smartstore.Core.Checkout.Attributes.CheckoutAttribute", "CheckoutAttribute")
                        .WithMany("CheckoutAttributeValues")
                        .HasForeignKey("CheckoutAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Content.Media.MediaFile", "MediaFile")
                        .WithMany()
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CheckoutAttribute");

                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Cart.ShoppingCartItem", b =>
                {
                    b.HasOne("Smartstore.Core.Catalog.Products.ProductBundleItem", "BundleItem")
                        .WithMany()
                        .HasForeignKey("BundleItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Smartstore.Core.Identity.Customer", "Customer")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BundleItem");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.GiftCards.GiftCard", b =>
                {
                    b.HasOne("Smartstore.Core.Checkout.Orders.OrderItem", "PurchasedWithOrderItem")
                        .WithMany("AssociatedGiftCards")
                        .HasForeignKey("PurchasedWithOrderItemId");

                    b.Navigation("PurchasedWithOrderItem");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.GiftCards.GiftCardUsageHistory", b =>
                {
                    b.HasOne("Smartstore.Core.Checkout.GiftCards.GiftCard", "GiftCard")
                        .WithMany("GiftCardUsageHistory")
                        .HasForeignKey("GiftCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Checkout.Orders.Order", "UsedWithOrder")
                        .WithMany("GiftCardUsageHistory")
                        .HasForeignKey("UsedWithOrderId");

                    b.Navigation("GiftCard");

                    b.Navigation("UsedWithOrder");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Orders.Order", b =>
                {
                    b.HasOne("Smartstore.Core.Common.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Identity.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Common.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.Navigation("BillingAddress");

                    b.Navigation("Customer");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Orders.OrderItem", b =>
                {
                    b.HasOne("Smartstore.Core.Checkout.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Orders.OrderNote", b =>
                {
                    b.HasOne("Smartstore.Core.Checkout.Orders.Order", "Order")
                        .WithMany("OrderNotes")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Orders.ReturnRequest", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.Customer", "Customer")
                        .WithMany("ReturnRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Payment.RecurringPayment", b =>
                {
                    b.HasOne("Smartstore.Core.Checkout.Orders.Order", "InitialOrder")
                        .WithMany()
                        .HasForeignKey("InitialOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InitialOrder");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Payment.RecurringPaymentHistory", b =>
                {
                    b.HasOne("Smartstore.Core.Checkout.Payment.RecurringPayment", "RecurringPayment")
                        .WithMany("RecurringPaymentHistory")
                        .HasForeignKey("RecurringPaymentId");

                    b.Navigation("RecurringPayment");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Shipping.Shipment", b =>
                {
                    b.HasOne("Smartstore.Core.Checkout.Orders.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Shipping.ShipmentItem", b =>
                {
                    b.HasOne("Smartstore.Core.Checkout.Shipping.Shipment", "Shipment")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("ShipmentId");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Smartstore.Core.Common.Address", b =>
                {
                    b.HasOne("Smartstore.Core.Common.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Smartstore.Core.Common.StateProvince", "StateProvince")
                        .WithMany()
                        .HasForeignKey("StateProvinceId");

                    b.Navigation("Country");

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("Smartstore.Core.Common.Country", b =>
                {
                    b.HasOne("Smartstore.Core.Common.Currency", "DefaultCurrency")
                        .WithMany()
                        .HasForeignKey("DefaultCurrencyId");

                    b.Navigation("DefaultCurrency");
                });

            modelBuilder.Entity("Smartstore.Core.Common.StateProvince", b =>
                {
                    b.HasOne("Smartstore.Core.Common.Country", "Country")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.Download", b =>
                {
                    b.HasOne("Smartstore.Core.Content.Media.MediaFile", "MediaFile")
                        .WithMany()
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.MediaFile", b =>
                {
                    b.HasOne("Smartstore.Core.Content.Media.MediaFolder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Smartstore.Core.Content.Media.MediaStorage", "MediaStorage")
                        .WithMany()
                        .HasForeignKey("MediaStorageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Folder");

                    b.Navigation("MediaStorage");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.MediaFolder", b =>
                {
                    b.HasOne("Smartstore.Core.Content.Media.MediaFolder", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.MediaTrack", b =>
                {
                    b.HasOne("Smartstore.Core.Content.Media.MediaFile", "MediaFile")
                        .WithMany("Tracks")
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Menus.MenuItemEntity", b =>
                {
                    b.HasOne("Smartstore.Core.Content.Menus.MenuEntity", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.Customer", b =>
                {
                    b.HasOne("Smartstore.Core.Common.Address", "BillingAddress")
                        .WithOne()
                        .HasForeignKey("Smartstore.Core.Identity.Customer", "BillingAddressId");

                    b.HasOne("Smartstore.Core.Common.Address", "ShippingAddress")
                        .WithOne()
                        .HasForeignKey("Smartstore.Core.Identity.Customer", "ShippingAddressId");

                    b.Navigation("BillingAddress");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.CustomerContent", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.Customer", "Customer")
                        .WithMany("CustomerContent")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.CustomerRoleMapping", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.Customer", "Customer")
                        .WithMany("CustomerRoleMappings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Identity.CustomerRole", "CustomerRole")
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerRole");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.ExternalAuthenticationRecord", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.Customer", "Customer")
                        .WithMany("ExternalAuthenticationRecords")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.RewardPointsHistory", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.Customer", "Customer")
                        .WithMany("RewardPointsHistory")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Checkout.Orders.Order", "UsedWithOrder")
                        .WithOne("RedeemedRewardPointsEntry")
                        .HasForeignKey("Smartstore.Core.Identity.RewardPointsHistory", "UsedWithOrderId");

                    b.Navigation("Customer");

                    b.Navigation("UsedWithOrder");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.WalletHistory", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.Customer", "Customer")
                        .WithMany("WalletHistory")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Checkout.Orders.Order", "Order")
                        .WithMany("WalletHistory")
                        .HasForeignKey("OrderId");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Smartstore.Core.Localization.LocaleStringResource", b =>
                {
                    b.HasOne("Smartstore.Core.Localization.Language", "Language")
                        .WithMany("LocaleStringResources")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Smartstore.Core.Localization.LocalizedProperty", b =>
                {
                    b.HasOne("Smartstore.Core.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Smartstore.Core.Logging.ActivityLog", b =>
                {
                    b.HasOne("Smartstore.Core.Logging.ActivityLogType", "ActivityLogType")
                        .WithOne()
                        .HasForeignKey("Smartstore.Core.Logging.ActivityLog", "ActivityLogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Identity.Customer", "Customer")
                        .WithOne()
                        .HasForeignKey("Smartstore.Core.Logging.ActivityLog", "CustomerId");

                    b.Navigation("ActivityLogType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Smartstore.Core.Logging.Log", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Smartstore.Core.Messages.QueuedEmail", b =>
                {
                    b.HasOne("Smartstore.Core.Messages.EmailAccount", "EmailAccount")
                        .WithMany()
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailAccount");
                });

            modelBuilder.Entity("Smartstore.Core.Messages.QueuedEmailAttachment", b =>
                {
                    b.HasOne("Smartstore.Core.Content.Media.MediaFile", "MediaFile")
                        .WithMany()
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Smartstore.Core.Content.Media.MediaStorage", "MediaStorage")
                        .WithMany()
                        .HasForeignKey("MediaStorageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Smartstore.Core.Messages.QueuedEmail", "QueuedEmail")
                        .WithMany("Attachments")
                        .HasForeignKey("QueuedEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaFile");

                    b.Navigation("MediaStorage");

                    b.Navigation("QueuedEmail");
                });

            modelBuilder.Entity("Smartstore.Core.Rules.RuleEntity", b =>
                {
                    b.HasOne("Smartstore.Core.Rules.RuleSetEntity", "RuleSet")
                        .WithMany("Rules")
                        .HasForeignKey("RuleSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RuleSet");
                });

            modelBuilder.Entity("Smartstore.Core.Security.AclRecord", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.CustomerRole", "CustomerRole")
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerRole");
                });

            modelBuilder.Entity("Smartstore.Core.Security.PermissionRoleMapping", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.CustomerRole", "CustomerRole")
                        .WithMany("PermissionRoleMappings")
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Security.PermissionRecord", "PermissionRecord")
                        .WithMany("PermissionRoleMappings")
                        .HasForeignKey("PermissionRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerRole");

                    b.Navigation("PermissionRecord");
                });

            modelBuilder.Entity("Smartstore.Core.Stores.Store", b =>
                {
                    b.HasOne("Smartstore.Core.Common.Currency", "PrimaryExchangeRateCurrency")
                        .WithMany()
                        .HasForeignKey("PrimaryExchangeRateCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Common.Currency", "PrimaryStoreCurrency")
                        .WithMany()
                        .HasForeignKey("PrimaryStoreCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PrimaryExchangeRateCurrency");

                    b.Navigation("PrimaryStoreCurrency");
                });

            modelBuilder.Entity("Smartstore.Scheduling.TaskExecutionInfo", b =>
                {
                    b.HasOne("Smartstore.Scheduling.TaskDescriptor", "Task")
                        .WithMany("ExecutionHistory")
                        .HasForeignKey("TaskDescriptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductReview", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.CustomerContent", null)
                        .WithOne()
                        .HasForeignKey("Smartstore.Core.Catalog.Products.ProductReview", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Catalog.Products.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductReviewHelpfulness", b =>
                {
                    b.HasOne("Smartstore.Core.Identity.CustomerContent", null)
                        .WithOne()
                        .HasForeignKey("Smartstore.Core.Catalog.Products.ProductReviewHelpfulness", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Smartstore.Core.Catalog.Products.ProductReview", "ProductReview")
                        .WithMany("ProductReviewHelpfulnessEntries")
                        .HasForeignKey("ProductReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductReview");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeOptionsSets");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductAttributeOptionsSet", b =>
                {
                    b.Navigation("ProductAttributeOptions");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.ProductVariantAttribute", b =>
                {
                    b.Navigation("ProductVariantAttributeValues");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.SpecificationAttribute", b =>
                {
                    b.Navigation("SpecificationAttributeOptions");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption", b =>
                {
                    b.Navigation("ProductSpecificationAttributes");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.Product", b =>
                {
                    b.Navigation("ProductBundleItems");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductManufacturers");

                    b.Navigation("ProductPictures");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductSpecificationAttributes");

                    b.Navigation("ProductVariantAttributeCombinations");

                    b.Navigation("ProductVariantAttributes");

                    b.Navigation("TierPrices");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductBundleItem", b =>
                {
                    b.Navigation("AttributeFilters");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Attributes.CheckoutAttribute", b =>
                {
                    b.Navigation("CheckoutAttributeValues");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.GiftCards.GiftCard", b =>
                {
                    b.Navigation("GiftCardUsageHistory");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Orders.Order", b =>
                {
                    b.Navigation("DiscountUsageHistory");

                    b.Navigation("GiftCardUsageHistory");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderNotes");

                    b.Navigation("RedeemedRewardPointsEntry");

                    b.Navigation("Shipments");

                    b.Navigation("WalletHistory");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Orders.OrderItem", b =>
                {
                    b.Navigation("AssociatedGiftCards");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Payment.RecurringPayment", b =>
                {
                    b.Navigation("RecurringPaymentHistory");
                });

            modelBuilder.Entity("Smartstore.Core.Checkout.Shipping.Shipment", b =>
                {
                    b.Navigation("ShipmentItems");
                });

            modelBuilder.Entity("Smartstore.Core.Common.Country", b =>
                {
                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.MediaFile", b =>
                {
                    b.Navigation("ProductMediaFiles");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Media.MediaFolder", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Smartstore.Core.Content.Menus.MenuEntity", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.Customer", b =>
                {
                    b.Navigation("CustomerContent");

                    b.Navigation("CustomerRoleMappings");

                    b.Navigation("ExternalAuthenticationRecords");

                    b.Navigation("Orders");

                    b.Navigation("ReturnRequests");

                    b.Navigation("RewardPointsHistory");

                    b.Navigation("ShoppingCartItems");

                    b.Navigation("WalletHistory");
                });

            modelBuilder.Entity("Smartstore.Core.Identity.CustomerRole", b =>
                {
                    b.Navigation("PermissionRoleMappings");
                });

            modelBuilder.Entity("Smartstore.Core.Localization.Language", b =>
                {
                    b.Navigation("LocaleStringResources");
                });

            modelBuilder.Entity("Smartstore.Core.Messages.QueuedEmail", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Smartstore.Core.Rules.RuleSetEntity", b =>
                {
                    b.Navigation("Rules");
                });

            modelBuilder.Entity("Smartstore.Core.Security.PermissionRecord", b =>
                {
                    b.Navigation("PermissionRoleMappings");
                });

            modelBuilder.Entity("Smartstore.Scheduling.TaskDescriptor", b =>
                {
                    b.Navigation("ExecutionHistory");
                });

            modelBuilder.Entity("Smartstore.Core.Catalog.Products.ProductReview", b =>
                {
                    b.Navigation("ProductReviewHelpfulnessEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
